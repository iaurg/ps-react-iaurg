{"version":3,"sources":["components/Label/Label.js","components/ProgressBar/ProgressBar.js","components/TextInput/TextInput.js","components/EyeIcon/EyeIcon.js","components/PasswordInput/PasswordInput.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","ProgressBar","getColor","percent","props","getWidthAsPercentOfTotalWidth","width","parseInt","this","height","border","backgroundColor","Component","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","marginBottom","id","className","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","maxLength","showVisibilityToggle","quality","useState","showPassword","setShowPassword","href","onClick","event","preventDefault","marginLeft","length","defaultProps","module","exports","EyeIconExample","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","setPassword","target","minLength","getQuality","Example100Percent","Example10Percent","Example70Percent","ExampleError","HelloWorld","message","exampleHelloWorld","RegisrationForm","confirmationMessage","minPasswordLength","submitted","setSubmitted","email","user","setUser","errors","setErrors","prevState","Object","getOwnPropertyNames","validate","onSubmit","ExampleRegistrationForm","console","log","TextInputBEM","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve","Navigation","components","key","CodeExample","element","useRef","useEffect","hljs","registerLanguage","javascript","highlightBlock","ref","Example","example","description","componentName","showCode","setShowCode","ExampleComponent","require","default","Props","defaultValue","ComponentPage","component","examples","Docs","window","location","hash","substr","route","setRoute","addEventListener","componentData","filter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c16edfcb.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** Label with required field display, htmlFor and block styling */\n\nexport default function Label({ htmlFor, label, required }) {\n  return (\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\n      {label} {required && <span style={{ color: \"red\" }}>*</span>}\n    </label>\n  );\n}\n\nLabel.propTypes = {\n  /**HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n  /** Label text */\n  label: PropTypes.string.isRequired,\n  /** Display asterisk after label if true */\n  required: PropTypes.bool,\n};\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class ProgressBar extends Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green'\n    return this.props.percent > 50 ? 'lightgreen' : 'red'\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    const { percent, width } = this.props\n    return parseInt(width * (percent / 100), 10)\n  }\n  \n  render() {\n    const { percent, width, height = 5 } = this.props\n    return (\n      <div style={{ border: '1px solid lightgray', width: width }}>\n      <div\n        style={{\n          height,\n          width:this.getWidthAsPercentOfTotalWidth(),\n          backgroundColor: this.getColor(percent)\n        }}\n      />\n    </div>\n    )\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n  /** Bar height */\n  height: PropTypes.number,\n  /** Bar width */\n  width: PropTypes.number.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Label from '../Label'\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nexport default function TextInput ({\n  htmlId,\n  name,\n  label,\n  type = 'text',\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: 'solid 1px red' }}\n        {...props}\n      />\n      {children}\n      {error && (\n        <div className='error' style={{ color: 'red' }}>\n          {error}\n        </div>\n      )}\n    </div>\n  )\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n}\n","import React from \"react\";\n\n/** SVG Eye Icon */\nexport default function EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 22 22\"\n    >\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  );\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport ProgressBar from '../ProgressBar'\nimport EyeIcon from '../EyeIcon'\nimport TextInput from '../TextInput'\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nexport default function PasswordInput ({ htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props }) {\n  const [showPassword, setShowPassword] = useState(false)\n\n  function toggleShowPassword (event) {\n    setShowPassword(!showPassword)\n    if (event) event.preventDefault()\n  }\n\n  return (\n    <TextInput\n      htmlId={htmlId}\n      label={label}\n      placeholder={placeholder}\n      type={showPassword ? 'text' : 'password'}\n      onChange={onChange}\n      value={value}\n      maxLength={maxLength}\n      error={error}\n      required\n      {...props}\n    >\n      {\n        showVisibilityToggle &&\n          <a\n            href='#'\n            onClick={toggleShowPassword}\n            style={{ marginLeft: 5 }}\n          >\n            <EyeIcon />\n          </a>\n      }\n      {\n        value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n      }\n    </TextInput>\n  )\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention. */\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n}\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n}\n","module.exports = [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from \\\"react\\\";\\n\\n/** SVG Eye Icon */\\nexport default function EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg\\n      width=\\\"16\\\"\\n      height=\\\"16\\\"\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 0 22 22\\\"\\n    >\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  );\\n}\\n\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from 'react';\\nimport EyeIcon from 'ps-react/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A super lame good component just say Hello World\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"'World'\",\"computed\":false}}},\"code\":\"import React from 'react'\\r\\nimport PropTypes from 'prop-types'\\r\\n/** A super lame good component just say Hello World */\\r\\nexport default function HelloWorld ({ message }) {\\r\\n  return <div>Hello {message}</div>\\r\\n}\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n  /** Message to display */\\r\\n  message: PropTypes.string\\r\\n}\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: 'World'\\r\\n}\\r\\n\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"Custom Message\",\"code\":\"import React from \\\"react\\\";\\r\\nimport HelloWorld from \\\"ps-react/HelloWorld\\\";\\r\\n\\r\\n/** Custom Message */\\r\\nexport default function exampleHelloWorld() {\\r\\n  return <HelloWorld message=\\\"Segredo Dev\\\" />;\\r\\n}\\r\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Display asterisk after label if true\"}},\"code\":\"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/** Label with required field display, htmlFor and block styling */\\n\\nexport default function Label({ htmlFor, label, required }) {\\n  return (\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\n      {label} {required && <span style={{ color: \\\"red\\\" }}>*</span>}\\n    </label>\\n  );\\n}\\n\\nLabel.propTypes = {\\n  /**HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional label\",\"code\":\"import React from \\\"react\\\";\\nimport Label from \\\"ps-react/Label\\\";\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\n}\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required label\",\"code\":\"import React from \\\"react\\\";\\nimport Label from \\\"ps-react/Label\\\";\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />;\\n}\\n\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"'Password'\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React, { useState } from 'react'\\nimport PropTypes from 'prop-types'\\nimport ProgressBar from '../ProgressBar'\\nimport EyeIcon from '../EyeIcon'\\nimport TextInput from '../TextInput'\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nexport default function PasswordInput ({ htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props }) {\\n  const [showPassword, setShowPassword] = useState(false)\\n\\n  function toggleShowPassword (event) {\\n    setShowPassword(!showPassword)\\n    if (event) event.preventDefault()\\n  }\\n\\n  return (\\n    <TextInput\\n      htmlId={htmlId}\\n      label={label}\\n      placeholder={placeholder}\\n      type={showPassword ? 'text' : 'password'}\\n      onChange={onChange}\\n      value={value}\\n      maxLength={maxLength}\\n      error={error}\\n      required\\n      {...props}\\n    >\\n      {\\n        showVisibilityToggle &&\\n          <a\\n            href='#'\\n            onClick={toggleShowPassword}\\n            style={{ marginLeft: 5 }}\\n          >\\n            <EyeIcon />\\n          </a>\\n      }\\n      {\\n        value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n      }\\n    </TextInput>\\n  )\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n}\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n}\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"All features enabled\",\"code\":\"import React, { useState } from 'react'\\nimport PasswordInput from 'ps-react/PasswordInput'\\n\\n/** All features enabled */\\nexport default function ExampleAllFeatures (props) {\\n  const [password, setPassword] = useState('')\\n\\n  function getQuality () {\\n    const length = password.length\\n    return length > 10 ? 100 : length * 10\\n  }\\n\\n  return (\\n    <PasswordInput\\n      htmlId='password-input-example-all-features'\\n      name='password'\\n      onChange={event => setPassword(event.target.value)}\\n      value={password}\\n      minLength={8}\\n      placeholder='Enter password'\\n      showVisibilityToggle\\n      quality={getQuality()}\\n      {...props}\\n    />\\n  )\\n}\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"}},\"code\":\"import React, { Component } from 'react'\\nimport PropTypes from 'prop-types'\\n\\nexport default class ProgressBar extends Component {\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green'\\n    return this.props.percent > 50 ? 'lightgreen' : 'red'\\n  }\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    const { percent, width } = this.props\\n    return parseInt(width * (percent / 100), 10)\\n  }\\n  \\n  render() {\\n    const { percent, width, height = 5 } = this.props\\n    return (\\n      <div style={{ border: '1px solid lightgray', width: width }}>\\n      <div\\n        style={{\\n          height,\\n          width:this.getWidthAsPercentOfTotalWidth(),\\n          backgroundColor: this.getColor(percent)\\n        }}\\n      />\\n    </div>\\n    )\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n  /** Bar height */\\n  height: PropTypes.number,\\n  /** Bar width */\\n  width: PropTypes.number.isRequired\\n}\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"Example 100% complete Progress Bar and custom height\",\"code\":\"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** Example 100% complete Progress Bar and custom height*/\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n}\\n\"},{\"name\":\"Example10Percent\",\"description\":\"Example 10% complete Progress Bar\",\"code\":\"import React from 'react'\\nimport ProgressBar from 'ps-react/ProgressBar'\\n/** Example 10% complete Progress Bar */\\nexport default function Example10Percent () {\\n  return <ProgressBar percent={10} width={150} />\\n}\\n\"},{\"name\":\"Example70Percent\",\"description\":\"Example 70% complete Progress Bar\",\"code\":\"import React from \\\"react\\\";\\nimport ProgressBar from \\\"ps-react/ProgressBar\\\";\\n\\n/** Example 70% complete Progress Bar */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />;\\n}\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"'Thanks for registering'\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React, { useState } from 'react'\\nimport PropTypes from 'prop-types'\\nimport TextInput from '../TextInput'\\nimport PasswordInput from '../PasswordInput'\\n\\n/** Registration form with built-in validation */\\nexport default function RegisrationForm ({ confirmationMessage = 'Thanks for registering', minPasswordLength = 8, ...props }) {\\n  const [submitted, setSubmitted] = useState(false)\\n  const [user, setUser] = useState({ email: '', password: '' })\\n  const [errors, setErrors] = useState({})\\n\\n  function onChange (event) {\\n    const { name, value } = event.target\\n\\n    setUser(prevState => ({\\n      ...prevState,\\n      [name]: value\\n    }))\\n  }\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  function passwordQuality (password) {\\n    if (!user.password) return null\\n    if (user.password.length >= minPasswordLength) return 100\\n    const percentOfMinLength = parseInt(user.password.length / minPasswordLength * 100, 10)\\n    return percentOfMinLength\\n  }\\n\\n  function validate ({ email, password }) {\\n    const errors = {}\\n\\n    if (!email) errors.email = 'Email required'\\n    if (password.length < minPasswordLength) errors.password = `Password be at least ${minPasswordLength}`\\n\\n    setErrors(errors)\\n\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0\\n    return formIsValid\\n  }\\n\\n  function onSubmit () {\\n    const formIsValid = validate(user)\\n    if (formIsValid) {\\n      props.onSubmit(user)\\n      setSubmitted(true)\\n    }\\n  }\\n\\n  return (\\n    submitted\\n      ? <h2>{confirmationMessage}</h2>\\n      : <div>\\n        <TextInput\\n          htmlId='registration-form-email'\\n          name='email'\\n          value={user.email}\\n          onChange={onChange}\\n          label='email'\\n          error={errors.email}\\n          required\\n        />\\n        <PasswordInput\\n          htmlId='registration-form-password'\\n          name='password'\\n          value={user.password}\\n          onChange={onChange}\\n          quality={passwordQuality(user.password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password}\\n        />\\n\\n        <input type='submit' value='Register' onClick={onSubmit} />\\n      </div>\\n  )\\n}\\n\\nRegisrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n\\n  minPasswordLength: PropTypes.number\\n}\\n\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React from 'react'\\r\\nimport RegistrationForm from 'ps-react/RegistrationForm'\\r\\n\\r\\nexport default function ExampleRegistrationForm () {\\r\\n  function onSubmit (user) {\\r\\n    console.log(user)\\r\\n  }\\r\\n  return (\\r\\n    <RegistrationForm onSubmit={onSubmit} />\\r\\n  )\\r\\n}\\r\\n\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"'text'\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react'\\nimport PropTypes from 'prop-types'\\nimport Label from '../Label'\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nexport default function TextInput ({\\n  htmlId,\\n  name,\\n  label,\\n  type = 'text',\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div style={{ marginBottom: 16 }}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && { border: 'solid 1px red' }}\\n        {...props}\\n      />\\n      {children}\\n      {error && (\\n        <div className='error' style={{ color: 'red' }}>\\n          {error}\\n        </div>\\n      )}\\n    </div>\\n  )\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n}\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react/TextInput\\\";\\n\\n/** Required TextBox with error */\\nexport default function ExampleError() {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n      required\\n      error=\\\"First name is required.\\\"\\n    />\\n  );\\n}\\n\"},{\"name\":\"ExampleOptional\",\"description\":\"Optional TextBox\",\"code\":\"import React from \\\"react\\\";\\nimport TextInput from \\\"ps-react/TextInput\\\";\\n\\n/** Optional TextBox */\\nexport default function ExampleOptional() {\\n  return (\\n    <TextInput\\n      htmlId=\\\"example-optional\\\"\\n      label=\\\"First Name\\\"\\n      name=\\\"firstname\\\"\\n      onChange={() => {}}\\n    />\\n  );\\n}\\n\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'text'\",\"computed\":false},{\"value\":\"'number'\",\"computed\":false},{\"value\":\"'password'\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"'text'\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from 'react'\\r\\nimport PropTypes from 'prop-types'\\r\\nimport Label from '../Label'\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\r\\nexport default function TextInputBEM ({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = 'text',\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) {\\r\\n  return (\\r\\n    <div className='textinput'>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && 'textinput__input--state-error'}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && (\\r\\n        <div className='textinput__error'>\\r\\n          {error}\\r\\n        </div>\\r\\n      )}\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nTextInputBEM.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n}\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from 'react';\\nimport TextInputBEM from 'ps-react/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default function ExampleError () {\\n  return (\\n    <TextInputBEM\\n      htmlId='example-optional'\\n      label='First Name'\\n      name='firstname'\\n      onChange={() => {}}\\n      required\\n      error='First name is required.'\\n    />\\n  )\\n}\\n\"}]}]","import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from \"react\";\nimport Label from \"ps-react/Label\";\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />;\n}\n","import React from \"react\";\nimport Label from \"ps-react/Label\";\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />;\n}\n","import React, { useState } from 'react'\nimport PasswordInput from 'ps-react/PasswordInput'\n\n/** All features enabled */\nexport default function ExampleAllFeatures (props) {\n  const [password, setPassword] = useState('')\n\n  function getQuality () {\n    const length = password.length\n    return length > 10 ? 100 : length * 10\n  }\n\n  return (\n    <PasswordInput\n      htmlId='password-input-example-all-features'\n      name='password'\n      onChange={event => setPassword(event.target.value)}\n      value={password}\n      minLength={8}\n      placeholder='Enter password'\n      showVisibilityToggle\n      quality={getQuality()}\n      {...props}\n    />\n  )\n}\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** Example 100% complete Progress Bar and custom height*/\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />;\n}\n","import React from 'react'\nimport ProgressBar from 'ps-react/ProgressBar'\n/** Example 10% complete Progress Bar */\nexport default function Example10Percent () {\n  return <ProgressBar percent={10} width={150} />\n}\n","import React from \"react\";\nimport ProgressBar from \"ps-react/ProgressBar\";\n\n/** Example 70% complete Progress Bar */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />;\n}\n","import React from \"react\";\nimport TextInput from \"ps-react/TextInput\";\n\n/** Required TextBox with error */\nexport default function ExampleError() {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n      required\n      error=\"First name is required.\"\n    />\n  );\n}\n","import React from \"react\";\nimport TextInput from \"ps-react/TextInput\";\n\n/** Optional TextBox */\nexport default function ExampleOptional() {\n  return (\n    <TextInput\n      htmlId=\"example-optional\"\n      label=\"First Name\"\n      name=\"firstname\"\n      onChange={() => {}}\n    />\n  );\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n/** A super lame good component just say Hello World */\r\nexport default function HelloWorld ({ message }) {\r\n  return <div>Hello {message}</div>\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n  message: PropTypes.string\r\n}\r\n\r\nHelloWorld.defaultProps = {\r\n  message: 'World'\r\n}\r\n","import React from \"react\";\r\nimport HelloWorld from \"ps-react/HelloWorld\";\r\n\r\n/** Custom Message */\r\nexport default function exampleHelloWorld() {\r\n  return <HelloWorld message=\"Segredo Dev\" />;\r\n}\r\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport TextInput from '../TextInput'\nimport PasswordInput from '../PasswordInput'\n\n/** Registration form with built-in validation */\nexport default function RegisrationForm ({ confirmationMessage = 'Thanks for registering', minPasswordLength = 8, ...props }) {\n  const [submitted, setSubmitted] = useState(false)\n  const [user, setUser] = useState({ email: '', password: '' })\n  const [errors, setErrors] = useState({})\n\n  function onChange (event) {\n    const { name, value } = event.target\n\n    setUser(prevState => ({\n      ...prevState,\n      [name]: value\n    }))\n  }\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  function passwordQuality (password) {\n    if (!user.password) return null\n    if (user.password.length >= minPasswordLength) return 100\n    const percentOfMinLength = parseInt(user.password.length / minPasswordLength * 100, 10)\n    return percentOfMinLength\n  }\n\n  function validate ({ email, password }) {\n    const errors = {}\n\n    if (!email) errors.email = 'Email required'\n    if (password.length < minPasswordLength) errors.password = `Password be at least ${minPasswordLength}`\n\n    setErrors(errors)\n\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0\n    return formIsValid\n  }\n\n  function onSubmit () {\n    const formIsValid = validate(user)\n    if (formIsValid) {\n      props.onSubmit(user)\n      setSubmitted(true)\n    }\n  }\n\n  return (\n    submitted\n      ? <h2>{confirmationMessage}</h2>\n      : <div>\n        <TextInput\n          htmlId='registration-form-email'\n          name='email'\n          value={user.email}\n          onChange={onChange}\n          label='email'\n          error={errors.email}\n          required\n        />\n        <PasswordInput\n          htmlId='registration-form-password'\n          name='password'\n          value={user.password}\n          onChange={onChange}\n          quality={passwordQuality(user.password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password}\n        />\n\n        <input type='submit' value='Register' onClick={onSubmit} />\n      </div>\n  )\n}\n\nRegisrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n\n  minPasswordLength: PropTypes.number\n}\n","import React from 'react'\r\nimport RegistrationForm from 'ps-react/RegistrationForm'\r\n\r\nexport default function ExampleRegistrationForm () {\r\n  function onSubmit (user) {\r\n    console.log(user)\r\n  }\r\n  return (\r\n    <RegistrationForm onSubmit={onSubmit} />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Label from '../Label'\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\r\nexport default function TextInputBEM ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = 'text',\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) {\r\n  return (\r\n    <div className='textinput'>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && 'textinput__input--state-error'}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && (\r\n        <div className='textinput__error'>\r\n          {error}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nTextInputBEM.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf(['text', 'number', 'password']),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n}\r\n","import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default function ExampleError () {\n  return (\n    <TextInputBEM\n      htmlId='example-optional'\n      label='First Name'\n      name='firstname'\n      onChange={() => {}}\n      required\n      error='First name is required.'\n    />\n  )\n}\n","var map = {\n\t\"./EyeIcon/Example\": 12,\n\t\"./EyeIcon/Example.js\": 12,\n\t\"./HelloWorld/ExampleHelloWorld\": 21,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 21,\n\t\"./Label/ExampleOptional\": 13,\n\t\"./Label/ExampleOptional.js\": 13,\n\t\"./Label/ExampleRequired\": 14,\n\t\"./Label/ExampleRequired.js\": 14,\n\t\"./PasswordInput/ExampleAllFeatures\": 15,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 15,\n\t\"./ProgressBar/Example100Percent\": 16,\n\t\"./ProgressBar/Example100Percent.js\": 16,\n\t\"./ProgressBar/Example10Percent\": 17,\n\t\"./ProgressBar/Example10Percent.js\": 17,\n\t\"./ProgressBar/Example70Percent\": 18,\n\t\"./ProgressBar/Example70Percent.js\": 18,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 22,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 22,\n\t\"./TextInput/ExampleError\": 19,\n\t\"./TextInput/ExampleError.js\": 19,\n\t\"./TextInput/ExampleOptional\": 20,\n\t\"./TextInput/ExampleOptional.js\": 20,\n\t\"./TextInputBEM/ExampleError\": 23,\n\t\"./TextInputBEM/ExampleError.js\": 23\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 37;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function Navigation({ components }) {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {components.map((name) => {\r\n        return (\r\n          <li key={name}>\r\n            <a href={`#${name}`}>{name}</a>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired,\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport hljs from \"highlight.js/lib/highlight\";\r\nimport javascript from \"highlight.js/lib/languages/javascript\";\r\n\r\nexport default function CodeExample({ children }) {\r\n  let element = useRef(null);\r\n  useEffect(() => {\r\n    hljs.registerLanguage(\"javascript\", javascript);\r\n    hljs.highlightBlock(element);\r\n  }, []);\r\n\r\n  return (\r\n    <pre\r\n      ref={(ref) => {\r\n        element = ref;\r\n      }}\r\n    >\r\n      <code>{children}</code>\r\n    </pre>\r\n  );\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CodeExample from \"./CodeExample\";\r\nexport default function Example(props) {\r\n  const { code, description, name } = props.example;\r\n  const { componentName } = props;\r\n  const [showCode, setShowCode] = useState(false);\r\n  const ExampleComponent = require(`./examples/${componentName}/${name}`)\r\n    .default;\r\n\r\n  function toggleCode(event) {\r\n    event.preventDefault();\r\n    setShowCode(!showCode);\r\n  }\r\n\r\n  return (\r\n    <div className=\"example\">\r\n      {description && <h4>{description}</h4>}\r\n\r\n      <ExampleComponent></ExampleComponent>\r\n      <p>\r\n        <button onClick={toggleCode}>{showCode ? \"Hide\" : \"Show\"} Code</button>\r\n      </p>\r\n\r\n      {showCode && <CodeExample>{code}</CodeExample>}\r\n    </div>\r\n  );\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function Props({ props }) {\r\n  return (\r\n    <table className=\"props\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Object.keys(props).map((key) => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>\r\n                {props[key].defaultValue && props[key].defaultValue.value}\r\n              </td>\r\n              <td>{props[key].required && \"X\"}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Example from './Example'\r\nimport Props from './Props'\r\n\r\nexport default function ComponentPage ({ component }) {\r\n  const { name, description, props, examples } = component\r\n  return (\r\n    <div className='componentpage'>\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n      <h3>Example{examples.length > 1 && 's'}</h3>\r\n      {examples.length > 0\r\n        ? examples.map((example) => (\r\n          <Example\r\n            key={example.code}\r\n            example={example}\r\n            componentName={name}\r\n          />\r\n        ))\r\n        : 'No example exist'}\r\n\r\n      <h3>Props</h3>\r\n      {props ? <Props props={props} /> : 'This component accept no props'}\r\n    </div>\r\n  )\r\n}\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Navigation from \"./Navigation\";\r\nimport ComponentPage from \"./ComponentPage\";\r\nimport componentData from \"../../config/componentData\";\r\n\r\nexport default function Docs() {\r\n  const [route, setRoute] = useState(window.location.hash.substr(1));\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"hashchange\", () => {\r\n      setRoute(window.location.hash.substr(1));\r\n    });\r\n  }, [setRoute]);\r\n\r\n  const component = route\r\n    ? componentData.filter((component) => component.name === route)[0]\r\n    : componentData[0];\r\n\r\n  return (\r\n    <div>\r\n      <Navigation\r\n        components={componentData.map((component) => component.name)}\r\n      />\r\n      <ComponentPage component={component} />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Docs from './docs/Docs'\nimport '../node_modules/highlight.js/styles/ocean.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Docs />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}